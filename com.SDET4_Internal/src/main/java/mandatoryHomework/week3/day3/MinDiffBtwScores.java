package week3.day3;

import org.junit.Test;

import java.util.TreeSet;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

public class MinDiffBtwScores {
	
	
	@Test
	
	public void Test1() {
		
		
		int [] input_array = {9,4,1,7};
		
		int Target_students = 2;
		
		findMinScores( input_array, Target_students);
		
	}
	
	@Test
	
	public void Test2() {
		
		
		int [] input_array = {90};
		
		int Target_students = 1;
		
		findMinScores( input_array, Target_students);
		
	}
	
//	@Test
	
	public void Test3() {
		
	//	int [] input_array= {70009,74327,66072,62527,33268,18929,51460,79248,7940,34550,44902,62997,63321,90764,5964,63640,59781,5109,70354,60800,48918,33462,76069,85748,64783,22962,22541,9869,28799,57776,2029,52169,86208,74197,44239,46913,78477,8270,60083,97140,42238,60681,88567,90903,73125,82197,55974,73960,73207,50088,69813,43608,61658,26302,95808,60113,54175,31608,38006,70223,76107,31490,665,14470,61860,83464,51504,32033,37060,55353,36586,10756,59004,80809,49956,96622,15106,22876,59249,89013,60558,47664,25109,90460,38542,51799,78517,44912,45703,18588,21765,95446,60899,89063,17207,72617,63327,5074,92893,98794,40843,39231,6175,83372,4051,53522,58772,93448,43977,58562,27158,49418,95268,34780,52374,99300,98556,40130,30700,53442,46293,47177,6134,65770,37332,14171,69117,43160,64587,96300,48490,96177,17815,34111,83540,37834,49601,45310,69425,7440,27715,36450,92316,1571,30420,19254,83588,98666,81205,83927,98071,29275,80922,57064,63541,78257,99346,92616,40753,72275,10922,95657,69932,11953,14295,97294,84130,96297,18566,28180,33301,30106,83727,25183,11226,67270,88873,69068,87945,5681,60702,58123,96149,20162,59984,98859,45122,87671,44190,61247,17971,19637,14798,59016,26715,34642,91559,69273,6877,14250,61783,63670,80411,63885,21445,69790,11708,71899,45151,83989,91670,8583,84591,14897,86994,57481,621,5272,28915,53984,48761,87907,80790,39460,64269,10936,69657,88769,25473,87229,41020,8608,48626,72309,23540,93868,21470,82485,94282,79496,88618,18390,35365,6942,87095,161,53954,2093,14825,94766,41013,19415,91083,94329,62007,18806,8726,49220,11928,91297,24166,47016,31377,39767,40586,49426,67751,43438,40462,92425,44967,33863,80881,65514,18362,31452,80791,81333,49634,28804,48585,94224,31815,71980,46456,66920,77190,86385,92743,9598,74988,99462,61433,79892,83307,70358,10229,49818,75029,70481,26423,90766,67214,90930,78289,51732,96053,35976,25289,78445,92751,18709,48176,4784,24316,56333,18184,58938,57554,69325,17691,23010,38609,85938,24387,70074,12648,42927,17761,34808,32458,32795,23374,97524,95704,3513,79647,89172,31771,14219,12853,8271,89483,60215,70446,19187,43796,80685,71420,21898,38238,55326,22388,22739,90516,44781,28378,12948,92526,74914,78722,39303,12738,51112,26524,42178,89762,25672,93531,43141,44664,81465,54180,95795,54863,46360,58188,86399,10124,53124,10562,63168,3448,6540,98168,2754,98565,1254,66152,21459,6069,57775,7822,64908,60820,16593,85523,37011,47105,70342,65213,43552,66753,44911,78500,45286,36281,7768,74100,70350,1942,99289,12057,69260,16447,89385,17873,21141,75012,63785,5856,21835,73936,30056,21380,15622,57257,24725,37576,90583,97138,3189,9489,62417,46369,51745,68520,83029,76683,82346,14619,10704,55981,61708,48087,10695,69782,61252,92479,28501,9778,4956,11572,5553,16764,15791,82271,25023,82009,53903,96732,45408,93679,73907,10515,15939,79389,94618,16424,89201,27257,78272,14608,9320,7474,32005,46280,66465,28106,40152,43414,94609,56486,80493,96630,91608,51492,60323,53589,88089,27300,15252,11191,70987,8305,12821,57107,36593,34855,97503,67503,56369,6022,65720,68526,9863,88085,97908,89858,27869,37521,4369,47804,17660,70581,49608,24376,51798,89114,44140,75619,46891,95882,87142,41093,36667,44546,56619,1692,83468,61665,42553,92953,8770,89251,32027,44092,71605,22060,98951,18747,93584,78626,32397,30270,12982,28764,45915,14092,48874,64,61469,95026,12153,19554,34605,21572,57157,66056,6929,37968,62036,1742,92633,56133,22597,15160,78190,49698,48727,37273,37895,75693,40083,42679,23023,87782,12383,71749,51967,35259,14790};
		int [] input_array = {70009,74327,66072,62527,33268,18929,51460,79248,7940,34550,44902,62997,63321,90764,5964,63640,59781,5109,70354,60800,48918,33462,76069,85748,64783,22962,22541,9869,28799,57776,2029,52169,86208,74197,44239,46913,78477,8270,60083,97140,42238,60681,88567,90903,73125,82197,55974,73960,73207,50088,69813,43608,61658,26302,95808,60113,54175,31608,38006,70223,76107,31490,665,14470,61860,83464,51504,32033,37060,55353,36586,10756,59004,80809,49956,96622,15106,22876,59249,89013,60558,47664,25109,90460,38542,51799,78517,44912,45703,18588,21765,95446,60899,89063,17207,72617,63327,5074,92893,98794,40843,39231,6175,83372,4051,53522,58772,93448,43977,58562,27158,49418,95268,34780,52374,99300,98556,40130,30700,53442,46293,47177,6134,65770,37332,14171,69117,43160,64587,96300,48490,96177,17815,34111,83540,37834,49601,45310,69425,7440,27715,36450,92316,1571,30420,19254,83588,98666,81205,83927,98071,29275,80922,57064,63541,78257,99346,92616,40753,72275,10922,95657,69932,11953,14295,97294,84130,96297,18566,28180,33301,30106,83727,25183,11226,67270,88873,69068,87945,5681,60702,58123,96149,20162,59984,98859,45122,87671,44190,61247,17971,19637,14798,59016,26715,34642,91559,69273,6877,14250,61783,63670,80411,63885,21445,69790,11708,71899,45151,83989,91670,8583,84591,14897,86994,57481,621,5272,28915,53984,48761,87907,80790,39460,64269,10936,69657,88769,25473,87229,41020,8608,48626,72309,23540,93868,21470,82485,94282,79496,88618,18390,35365,6942,87095,161,53954,2093,14825,94766,41013,19415,91083,94329,62007,18806,8726,49220,11928,91297,24166,47016,31377,39767,40586,49426,67751,43438,40462,92425,44967,33863,80881,65514,18362,31452,80791,81333,49634,28804,48585,94224,31815,71980,46456,66920,77190,86385,92743,9598,74988,99462,61433,79892,83307,70358,10229,49818,75029,70481,26423,90766,67214,90930,78289,51732,96053,35976,25289,78445,92751,18709,48176,4784,24316,56333,18184,58938,57554,69325,17691,23010,38609,85938,24387,70074,12648,42927,17761,34808,32458,32795,23374,97524,95704,3513,79647,89172,31771,14219,12853,8271,89483,60215,70446,19187,43796,80685,71420,21898,38238,55326,22388,22739,90516,44781,28378,12948,92526,74914,78722,39303,12738,51112,26524,42178,89762,25672,93531,43141,44664,81465,54180,95795,54863,46360,58188,86399,10124,53124,10562,63168,3448,6540,98168,2754,98565,1254,66152,21459,6069,57775,7822,64908,60820,16593,85523,37011,47105,70342,65213,43552,66753,44911,78500,45286,36281,7768,74100,70350,1942,99289,12057,69260,16447,89385,17873,21141,75012,63785,5856,21835,73936,30056,21380,15622,57257,24725,37576,90583,97138,3189,9489,62417,46369,51745,68520,83029,76683,82346,14619,10704,55981,61708,48087,10695,69782,61252,92479,28501,9778,4956,11572,5553,16764,15791,82271,25023,82009,53903,96732,45408,93679,73907,10515,15939,79389,94618,16424,89201,27257,78272,14608,9320,7474,32005,46280,66465,28106,40152,43414,94609,56486,80493,96630,91608,51492,60323,53589,88089,27300,15252,11191,70987,8305,12821,57107,36593,34855,97503,67503,56369,6022,65720,68526,9863,88085,97908,89858,27869,37521,4369,47804,17660,70581,49608,24376,51798,89114,44140,75619,46891,95882,87142,41093,36667,44546,56619,1692,83468,61665,42553,92953,8770,89251,32027,44092,71605,22060,98951,18747,93584,78626,32397,30270,12982,28764,45915,14092,48874,64,61469,95026,12153,19554,34605,21572,57157,66056,6929,37968,62036,1742,92633,56133,22597,15160,78190,49698,48727,37273,37895,75693,40083,42679,23023,87782,12383,71749,51967,35259,14790,53155,88848,27725,55963,78827,59851,46914,99962,9379,95601,16353,8759,8086,73485,69479,53740,66505,11348,33289,60991,37228,12426,59304,54744,80364,70638,77840,19006,28770,99678,89337,11727,61882,8708,92250,80747,22927,29317,37993,83148,70922,17384,29786,54329,47726,66909,54025,80477,88919,28218,32281,87866,7371,27175,50440,81518,7144,69858,79247,8946,85756,59871,99490,51238,54908,74187,99585,73462,19727,93824,35035,93627,73377,72752,4671,40796,12265,88095,29944,38860,863,37470,21794,25257,47563,58748,79091,68240,13076,45463,32981,58697,98536,88566,92266,92258,51971,46495,19706,79910,90445,15540,78831,46771,45871,74422,41065,9944,36549,94026,71502,60048,50084,17602,89988,55523,15766,32207,87691,42354,41138,42426,12714,88573,37567,94573,39879,1121,40034,36302,61265,67738,87243,94413,2786,29279,54177,52573,13796,49012,41621,6680,72007,48896,29941,92881,84126,9148,56297,23592,86361,44133,20733,49352,30930,3911,31256,18966,94827,3073,90679,78787,54679,51795,25609,41264,87721,83191,68702,97884,36789,95270,60370,61266,41677,66213,15011,75182,86424,64495,25101,59551,45561,37671,76655,33390,69225,80066,6753,47947,12779,49231,51010,48279,92183,44723,88566,26729,95101,17330,90545,97508,92837,89031,72340,78757,44219,80244,48606,80501,75864,94853,81352,31377,1857,68514,92544,48365,18643,24984,47188,2180,14045,6655,67392,13562,2011,28886,3459,81328,24163,52664,31362,32317,25981,35991,71356,91952,82711,35164,65006,37405,91804,83961,72012,28519,13572,26275,79880,76916,85027,77017,71540,53480,36296,17461,69234,32297,41527,89600,55708,49670,72120,9129,60366,88532,13312,45052,92357,25607,62825,33033,98099,31780,48877,10200,68196,86307,66727,20850,85801,68664,66310,22414,58571,22624,67454,34624,14936,66602,32188,5499,46338,79280,57557,72540,56054,63317,50924,99431,55307,95344,74950,14332,11348,24951,1162,50710,83996,73207,6832,5375,66163,6518,32981,61488,45478,54466,29662,21087,83012,97439,35623,34441,63125,123,40283,84361,14026,93631,36919,70962,95230,36589,36554,53942,80933,71099,74713,52478,71914,76803,1674,47593,41562,51390,89521,58496,51483,64986,93383,64595,1562,2990,39429,12912,44383,51315,99175,19945,78113,68253,45738,2747,97736,34518,12379,82290,30850,59572,58289,40378,62775,79636,24521,38348,6345,78401,32104,16223,88439,64485,81855,24504,56551,18406,5893,1604,62533,75642,74248,80506,85557,3782,72156,22719,56202};
		
		int Target_students = 575;
		
		findMinScores( input_array, Target_students);
		
	}

	private void findMinScores(int[] input_array, int target_students) {
		// TODO Auto-generated method stub
		
		System.out.println("Input array length is " +input_array.length);
		
		TreeSet <Integer> TS = new TreeSet<Integer>();
		
		for (int i=0; i<input_array.length; i++) {
			
			TS.add(input_array[i]);
			
			
		}
		System.out.println("Tree set length is " +TS.size());
		List <Integer> al = new ArrayList<Integer>(TS);
		
		System.out.println("AL size is " +al.size());
		int min = Integer.MAX_VALUE;
		
		if (Math.abs(al.get(target_students-1))  -Math.abs(al.get(0)) < min) min = Math.abs(al.get(target_students-1))  -Math.abs(al.get(0));
		
		int right = target_students;
		int left = 1;
		for (; right<input_array.length ; right++ , left++ ) {
			
			if (Math.abs(al.get(right))  -Math.abs(al.get(left)) < min) min = Math.abs(al.get(right))  -Math.abs(al.get(left));	 
			
		}
		
		System.out.println(min);
	
	}
	

}
